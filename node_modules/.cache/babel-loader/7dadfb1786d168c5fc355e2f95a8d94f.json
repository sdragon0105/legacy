{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\games\\\\crabada\\\\Economy\\\\EconomyContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Economy from './Economy';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = '';\n  let fetchURL = '';\n\n  switch (table) {\n    case 'MarketplaceSales':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace';\n      break;\n\n    case 'TUS':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab49efe0d854695198b42/economy/inflation';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n\n    default:\n      break;\n  }\n\n  try {\n    let response = await axios.get( // 'https://p2eanalytics.com/crabada/getEconomy',\n    fetchURL, {\n      params: {\n        // table: table,\n        // timeRange: timeRange,\n        frequency: frequencParam\n      }\n    });\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nfunction EconomyContainer() {\n  _s();\n\n  const [menus, setMenus] = useState([0, 0]);\n  const [timeFilter, setTimeFilter] = useState(['all', 'all']);\n  const [marketplaceData, setMarketplaceData] = useState([[]]);\n  const [tokenData, setTokenData] = useState([[]]);\n  const [tokenMinMax, setTokenMinMax] = useState([['auto', 'auto'], ['auto', 'auto']]);\n  const [marketMinMax, setMarketMinMax] = useState([['auto', 'auto'], ['auto', 'auto'], ['auto', 'auto']]);\n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [{\n      \"timestamp\": 1650369600000,\n      \"unitsSold\": 54,\n      \"averageNativeVolume\": 1127116000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20872518518518518518518,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650373200000,\n      \"unitsSold\": 68,\n      \"averageNativeVolume\": 1391438000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20462323529411764705882,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650376800000,\n      \"unitsSold\": 56,\n      \"averageNativeVolume\": 1207184000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 21556857142857142857142,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650380400000,\n      \"unitsSold\": 137,\n      \"averageNativeVolume\": 2697732000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 19691474452554744525547,\n      \"averageUSDPrice\": 0\n    }]\n  };\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market);\n\n      if (!err && market) {\n        console.log('ssssssssssssssssss');\n        let salesMin = 99999999999999;\n        let salesMax = -1;\n        let averageMin = 99999999999999;\n        let averageMax = -1;\n        let countMin = 99999999999999;\n        let countMax = -1; // let salesArray = market[0][0]['data']\n\n        let tempArray = temp.data; // let tempArray = market.data;\n\n        console.log('salesArray', tempArray);\n        let salesArr = [];\n        let averageArr = [];\n        let soldArr = [];\n        let marketArray = [];\n\n        for (let i = 0; i < tempArray.length; i++) {\n          let timestamp = tempArray[i].timestamp; //Example -> in ms\n\n          const date = new Date(timestamp);\n          const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`;\n          salesArr.push({\n            x: dateResult,\n            y: tempArray[i].averageNativeVolume / Math.pow(10, 18)\n          });\n          averageArr.push({\n            x: dateResult,\n            y: tempArray[i].averageNativePrice / Math.pow(10, 18)\n          });\n          soldArr.push({\n            x: dateResult,\n            y: tempArray[i].unitsSold\n          });\n\n          if (salesArr[i]['y'] < salesMin) {\n            salesMin = salesArr[i]['y'];\n          }\n\n          if (salesArr[i]['y'] > salesMax) {\n            salesMax = salesArr[i]['y'];\n          }\n\n          if (averageArr[i]['y'] < averageMin) {\n            averageMin = averageArr[i]['y'];\n          }\n\n          if (averageArr[i]['y'] > averageMax) {\n            averageMax = averageArr[i]['y'];\n          }\n\n          if (soldArr[i]['y'] < countMin) {\n            countMin = soldArr[i]['y'];\n          }\n\n          if (soldArr[i]['y'] > countMax) {\n            countMax = soldArr[i]['y'];\n          }\n        }\n\n        console.log('salesArr', salesArr);\n        marketArray.push([{\n          id: 'Sales',\n          data: salesArr\n        }]);\n        marketArray.push([{\n          id: 'Average Price',\n          data: averageArr\n        }]);\n        marketArray.push([{\n          id: 'Crabada Sold',\n          data: soldArr\n        }]);\n        console.log('marketArray', marketArray); // let averageMin = 99999999999999\n        // let averageMax = -1\n        // let averageArray = market[1][0]['data']\n        // for (let i = 0; i < averageArray.length; i++) {\n        //   if (averageArray[i]['y'] < averageMin) {\n        //     averageMin = averageArray[i]['y']\n        //   }\n        //   if (averageArray[i]['y'] > averageMax) {\n        //     averageMax = averageArray[i]['y']\n        //   }\n        // }\n        // let countMin = 99999999999999\n        // let countMax = -1\n        // let countArray = market[2][0]['data']\n        // for (let i = 0; i < countArray.length; i++) {\n        //   if (countArray[i]['y'] < countMin) {\n        //     countMin = countArray[i]['y']\n        //   }\n        //   if (countArray[i]['y'] > countMax) {\n        //     countMax = countArray[i]['y']\n        //   }\n        // }\n\n        salesMin = salesMin * 0.4;\n        salesMax = salesMax * 1.2;\n        averageMin = averageMin * 0.4;\n        averageMax = averageMax * 1.2;\n        countMin = countMin * 0.4;\n        countMax = countMax * 1.2; // setMarketplaceData(market)\n\n        setMarketplaceData(marketArray);\n        setMarketMinMax([[salesMin, salesMax], [averageMin, averageMax], [countMin, countMax]]);\n      }\n    });\n  }, [timeFilter[0]]);\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      console.log('token', token);\n\n      if (!err) {\n        let netSupplyMin = 99999999999999;\n        let netSupplyMax = -1;\n        let supplyArray = token[0][0]['data'];\n\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y'];\n          }\n\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y'];\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2;\n        netSupplyMin = netSupplyMin * 0.3;\n        setTokenData(token);\n        setTokenMinMax([[netSupplyMin, netSupplyMax], ['auto', 'auto']]);\n      }\n    });\n  }, [timeFilter[1]]);\n  return /*#__PURE__*/_jsxDEV(Economy, {\n    menus: menus,\n    setMenus: setMenus,\n    market: marketplaceData,\n    token: tokenData,\n    timeFilter: timeFilter,\n    setTimeFilter: setTimeFilter,\n    tokenMinMax: tokenMinMax,\n    marketMinMax: marketMinMax\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EconomyContainer, \"p+CoX6ZcRU6Ax6QojM9wp8Dc5E8=\");\n\n_c = EconomyContainer;\nexport default EconomyContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EconomyContainer\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/games/crabada/Economy/EconomyContainer.js"],"names":["React","useState","useEffect","useCallback","Economy","axios","fetchData","table","timeRange","callback","frequencParam","fetchURL","response","get","params","frequency","data","e","EconomyContainer","menus","setMenus","timeFilter","setTimeFilter","marketplaceData","setMarketplaceData","tokenData","setTokenData","tokenMinMax","setTokenMinMax","marketMinMax","setMarketMinMax","temp","err","market","console","log","salesMin","salesMax","averageMin","averageMax","countMin","countMax","tempArray","salesArr","averageArr","soldArr","marketArray","i","length","timestamp","date","Date","dateResult","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","push","x","y","averageNativeVolume","Math","pow","averageNativePrice","unitsSold","id","token","netSupplyMin","netSupplyMax","supplyArray"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport Economy from './Economy'\nimport axios from 'axios'\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = ''\n  let fetchURL = ''\n  switch (table) {\n    case 'MarketplaceSales':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace'\n      break\n    case 'TUS':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab49efe0d854695198b42/economy/inflation';\n      break\n    default: break\n  }\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n    default: break;\n  }\n  try {\n    let response = await axios.get(\n      // 'https://p2eanalytics.com/crabada/getEconomy',\n      fetchURL,\n      {\n        params: {\n          // table: table,\n          // timeRange: timeRange,\n          frequency: frequencParam,\n        },\n      },\n    );\n    callback(null, response.data.data)\n  } catch (e) {\n    callback(e)\n  }\n}\n\nfunction EconomyContainer() {\n  const [menus, setMenus] = useState([0, 0])\n  const [timeFilter, setTimeFilter] = useState(['all', 'all'])\n  const [marketplaceData, setMarketplaceData] = useState([[]])\n  const [tokenData, setTokenData] = useState([[]])\n  const [tokenMinMax, setTokenMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  const [marketMinMax, setMarketMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  \n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [\n        {\n            \"timestamp\": 1650369600000,\n            \"unitsSold\": 54,\n            \"averageNativeVolume\": 1127116000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20872518518518518518518,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650373200000,\n            \"unitsSold\": 68,\n            \"averageNativeVolume\": 1391438000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20462323529411764705882,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650376800000,\n            \"unitsSold\": 56,\n            \"averageNativeVolume\": 1207184000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 21556857142857142857142,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650380400000,\n            \"unitsSold\": 137,\n            \"averageNativeVolume\": 2697732000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 19691474452554744525547,\n            \"averageUSDPrice\": 0\n        },\t\t\t\t\n\t\t]\n}\n\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market);\n      if (!err && market) {\n      console.log('ssssssssssssssssss');\n      let salesMin = 99999999999999;\n      let salesMax = -1;\n      let averageMin = 99999999999999;\n      let averageMax = -1;\n      let countMin = 99999999999999\n      let countMax = -1\n      // let salesArray = market[0][0]['data']\n      let tempArray = temp.data;\n      // let tempArray = market.data;\n      console.log('salesArray', tempArray);\n      let salesArr = [];\n      let averageArr = [];\n      let soldArr = [];\n      let marketArray = [];\n\n      for (let i = 0; i < tempArray.length; i++) {\n        let timestamp = tempArray[i].timestamp; //Example -> in ms\n        const date = new Date(timestamp);\n        const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`;\n\n        salesArr.push({ x: dateResult, y: tempArray[i].averageNativeVolume / Math.pow(10, 18) });\n        averageArr.push({ x: dateResult, y: tempArray[i].averageNativePrice / Math.pow(10, 18) });\n        soldArr.push({ x: dateResult, y: tempArray[i].unitsSold });\n\n        if (salesArr[i]['y'] < salesMin) {\n          salesMin = salesArr[i]['y'];\n        }\n        if (salesArr[i]['y'] > salesMax) {\n          salesMax = salesArr[i]['y'];\n        }\n\n        if (averageArr[i]['y'] < averageMin) {\n          averageMin = averageArr[i]['y']\n        }\n        if (averageArr[i]['y'] > averageMax) {\n          averageMax = averageArr[i]['y']\n        }\n\n        if (soldArr[i]['y'] < countMin) {\n          countMin = soldArr[i]['y']\n        }\n        if (soldArr[i]['y'] > countMax) {\n          countMax = soldArr[i]['y']\n        }\n      }\n      console.log('salesArr', salesArr);\n      marketArray.push([{ id: 'Sales', data: salesArr }]);\n      marketArray.push([{ id: 'Average Price', data: averageArr }]);\n      marketArray.push([{ id: 'Crabada Sold', data: soldArr }]);\n      console.log('marketArray', marketArray);\n\n      // let averageMin = 99999999999999\n      // let averageMax = -1\n      // let averageArray = market[1][0]['data']\n      // for (let i = 0; i < averageArray.length; i++) {\n      //   if (averageArray[i]['y'] < averageMin) {\n      //     averageMin = averageArray[i]['y']\n      //   }\n      //   if (averageArray[i]['y'] > averageMax) {\n      //     averageMax = averageArray[i]['y']\n      //   }\n      // }\n      // let countMin = 99999999999999\n      // let countMax = -1\n      // let countArray = market[2][0]['data']\n      // for (let i = 0; i < countArray.length; i++) {\n      //   if (countArray[i]['y'] < countMin) {\n      //     countMin = countArray[i]['y']\n      //   }\n      //   if (countArray[i]['y'] > countMax) {\n      //     countMax = countArray[i]['y']\n      //   }\n      // }\n\n      salesMin = salesMin * 0.4;\n      salesMax = salesMax * 1.2;\n      averageMin = averageMin * 0.4;\n      averageMax = averageMax * 1.2;\n      countMin = countMin * 0.4;\n      countMax = countMax * 1.2;\n\n      // setMarketplaceData(market)\n      setMarketplaceData(marketArray);\n\n      setMarketMinMax([\n        [salesMin, salesMax],\n        [averageMin, averageMax],\n        [countMin, countMax],\n      ]);\n      }\n    })\n  }, [timeFilter[0]])\n\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      console.log('token',token)\n      if (!err) {\n        let netSupplyMin = 99999999999999\n        let netSupplyMax = -1\n\n        let supplyArray = token[0][0]['data']\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y']\n          }\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y']\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2\n        netSupplyMin = netSupplyMin * 0.3\n\n        setTokenData(token)\n        setTokenMinMax([\n          [netSupplyMin, netSupplyMax],\n          ['auto', 'auto'],\n        ])\n      }\n    })\n  }, [timeFilter[1]])\n  return (\n    <Economy\n      menus={menus}\n      setMenus={setMenus}\n      market={marketplaceData}\n      token={tokenData}\n      timeFilter={timeFilter}\n      setTimeFilter={setTimeFilter}\n      tokenMinMax={tokenMinMax}\n      marketMinMax={marketMinMax}\n    />\n  )\n}\n\nexport default EconomyContainer\n"]},"metadata":{},"sourceType":"module"}