{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\components\\\\Graphs\\\\Area.js\";\nimport React, { memo } from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction nFormatter(num, digits) {\n  const lookup = [{\n    value: 1,\n    symbol: ''\n  }, {\n    value: 1e3,\n    symbol: 'k'\n  }, {\n    value: 1e6,\n    symbol: 'M'\n  }, {\n    value: 1e9,\n    symbol: 'G'\n  }, {\n    value: 1e12,\n    symbol: 'T'\n  }, {\n    value: 1e15,\n    symbol: 'P'\n  }, {\n    value: 1e18,\n    symbol: 'E'\n  }];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup.slice().reverse().find(function (item) {\n    return num >= item.value;\n  });\n  return item ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol : '0';\n}\n\nfunction Area(_ref) {\n  let {\n    data,\n    colors,\n    minMax,\n    range,\n    tooltipFunction,\n    percentage\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(ResponsiveLine, {\n    data: data,\n    margin: {\n      top: 10,\n      right: 40,\n      bottom: 50,\n      left: 90\n    },\n    xScale: {\n      type: 'point'\n    },\n    yScale: {\n      type: 'linear',\n      min: minMax ? minMax[0] : 'auto',\n      max: minMax ? minMax[1] : 'auto',\n      stacked: false,\n      reverse: false\n    },\n    curve: \"monotoneX\",\n    axisBottom: {\n      orient: 'bottom',\n      tickSize: 15,\n      tickPadding: 5,\n      tickRotation: 0,\n      legendOffset: 45,\n      legendPosition: 'middle',\n      format: value => {\n        if (data.length > 0 && (range === '30days' || range === 'all')) {\n          let minimumDate = data[0]['data'][0]['x'].split('-');\n          let valueSplit = value.split('-');\n          let toDateFormat = parseInt(valueSplit[1]) + '/' + parseInt(valueSplit[0]) + '/' + parseInt(valueSplit[2]);\n          let toDateFormatMinimum = parseInt(minimumDate[1]) + '/' + parseInt(minimumDate[0]) + '/' + parseInt(minimumDate[2]);\n          let date = new Date(toDateFormat);\n          let minDate = new Date(toDateFormatMinimum);\n          let modulo = range === '30days' ? 518400 : 950400;\n          return (date.getTime() - minDate.getTime()) * 1000 % modulo === 0 ? value : '';\n        } else {\n          return value;\n        }\n      }\n    },\n    axisLeft: {\n      orient: 'left',\n      tickSize: 20,\n      tickPadding: 10,\n      tickRotation: 0,\n      legend: '',\n      legendOffset: -55,\n      legendPosition: 'middle',\n      format: value => {\n        if (percentage) {\n          return value + '%';\n        }\n\n        return value >= 0 ? nFormatter(value, 3) : '-' + nFormatter(-value, 3);\n      }\n    },\n    colors: colors,\n    pointColor: {\n      theme: 'background'\n    },\n    pointBorderWidth: 2,\n    pointBorderColor: {\n      from: 'serieColor'\n    },\n    enableArea: false,\n    useMesh: true,\n    lineWidth: 3,\n    areaOpacity: 0.7,\n    enablePoints: false,\n    enableGridX: false,\n    enableGridY: false,\n    tooltip: tooltipFunction,\n    theme: {\n      axis: {\n        ticks: {\n          text: {\n            fill: 'var(--text-color)'\n          }\n        },\n        legend: {\n          text: {\n            fill: 'var(--text-color)',\n            color: '#ffffff'\n          }\n        }\n      },\n      crosshair: {\n        line: {\n          stroke: '#ffffff',\n          strokeWidth: 3,\n          strokeOpacity: 1\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Area;\nexport default Area;\n\nvar _c;\n\n$RefreshReg$(_c, \"Area\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/components/Graphs/Area.js"],"names":["React","memo","ResponsiveLine","nFormatter","num","digits","lookup","value","symbol","rx","item","slice","reverse","find","toFixed","replace","Area","data","colors","minMax","range","tooltipFunction","percentage","top","right","bottom","left","type","min","max","stacked","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","format","length","minimumDate","split","valueSplit","toDateFormat","parseInt","toDateFormatMinimum","date","Date","minDate","modulo","getTime","legend","theme","from","axis","ticks","text","fill","color","crosshair","line","stroke","strokeWidth","strokeOpacity"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\nfunction nFormatter(num, digits) {\n  const lookup = [\n    { value: 1, symbol: '' },\n    { value: 1e3, symbol: 'k' },\n    { value: 1e6, symbol: 'M' },\n    { value: 1e9, symbol: 'G' },\n    { value: 1e12, symbol: 'T' },\n    { value: 1e15, symbol: 'P' },\n    { value: 1e18, symbol: 'E' },\n  ]\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/\n  var item = lookup\n    .slice()\n    .reverse()\n    .find(function (item) {\n      return num >= item.value\n    })\n  return item\n    ? (num / item.value).toFixed(digits).replace(rx, '$1') + item.symbol\n    : '0'\n}\n\nfunction Area({ data, colors, minMax, range, tooltipFunction, percentage }) {\n  return (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 10, right: 40, bottom: 50, left: 90 }}\n      xScale={{ type: 'point' }}\n      yScale={{\n        type: 'linear',\n        min: minMax ? minMax[0] : 'auto',\n        max: minMax ? minMax[1] : 'auto',\n        stacked: false,\n        reverse: false,\n      }}\n      curve=\"monotoneX\"\n      axisBottom={{\n        orient: 'bottom',\n        tickSize: 15,\n        tickPadding: 5,\n        tickRotation: 0,\n        legendOffset: 45,\n        legendPosition: 'middle',\n        format: (value) => {\n          if (data.length > 0 && (range === '30days' || range === 'all')) {\n            let minimumDate = data[0]['data'][0]['x'].split('-')\n            let valueSplit = value.split('-')\n            let toDateFormat =\n              parseInt(valueSplit[1]) +\n              '/' +\n              parseInt(valueSplit[0]) +\n              '/' +\n              parseInt(valueSplit[2])\n            let toDateFormatMinimum =\n              parseInt(minimumDate[1]) +\n              '/' +\n              parseInt(minimumDate[0]) +\n              '/' +\n              parseInt(minimumDate[2])\n            let date = new Date(toDateFormat)\n            let minDate = new Date(toDateFormatMinimum)\n            let modulo = range === '30days' ? 518400 : 950400\n            return ((date.getTime() - minDate.getTime()) * 1000) % modulo === 0\n              ? value\n              : ''\n          } else {\n            return value\n          }\n        },\n      }}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 20,\n        tickPadding: 10,\n        tickRotation: 0,\n        legend: '',\n        legendOffset: -55,\n        legendPosition: 'middle',\n        format: (value) => {\n          if (percentage) {\n            return value + '%'\n          }\n          return value >= 0 ? nFormatter(value, 3) : '-' + nFormatter(-value, 3)\n        },\n      }}\n      colors={colors}\n      pointColor={{ theme: 'background' }}\n      pointBorderWidth={2}\n      pointBorderColor={{ from: 'serieColor' }}\n      enableArea={false}\n      useMesh={true}\n      lineWidth={3}\n      areaOpacity={0.7}\n      enablePoints={false}\n      enableGridX={false}\n      enableGridY={false}\n      tooltip={tooltipFunction}\n      theme={{\n        axis: {\n          ticks: {\n            text: {\n              fill: 'var(--text-color)',\n            },\n          },\n          legend: {\n            text: {\n              fill: 'var(--text-color)',\n              color: '#ffffff',\n            },\n          },\n        },\n\n        crosshair: {\n          line: {\n            stroke: '#ffffff',\n            strokeWidth: 3,\n            strokeOpacity: 1,\n          },\n        },\n      }}\n    />\n  )\n}\n\nexport default Area\n"]},"metadata":{},"sourceType":"module"}