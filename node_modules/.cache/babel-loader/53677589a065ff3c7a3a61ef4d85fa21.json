{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\games\\\\crabada\\\\Prices\\\\PricesContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Prices from './Prices';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet cancelToken;\n\nconst fetchData = async (breed, legend, purity, stage, type, classes, callback) => {\n  try {\n    if (typeof cancelToken !== typeof undefined) {\n      cancelToken.cancel('Canceling previous request...');\n    }\n\n    cancelToken = axios.CancelToken.source();\n    const response = await axios.get('http://localhost:8080/crabada/getPrices', {\n      params: {\n        breedMin: stage ? breed[0] : 0,\n        breedMax: stage ? breed[1] : 0,\n        legendMin: stage ? legend[0] : 0,\n        legendMax: stage ? legend[1] : 0,\n        purityMin: stage ? purity[0] : 0,\n        purityMax: stage ? purity[1] : 0,\n        stage: stage,\n        isOrigin: stage && type[0] ? 1 : 0,\n        isGenesis: stage && type[1] ? 1 : 0,\n        classes: stage ? classes : false\n      },\n      cancelToken: cancelToken.token\n    });\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nconst colors = ['#FC252B', '#108C8C', '#C9B22E', '#793024', '#0068EC', '#533FB4', '#EC2C9E', '#34A527'];\n\nfunction PricesContainer() {\n  _s();\n\n  const [breed, setBreed] = useState([0, 5]);\n  const [legend, setLegend] = useState([0, 6]);\n  const [purity, setPurity] = useState([0, 6]);\n  const [stage, setStage] = useState(1); // 0 -> Egg, 1 -> Adult,\n\n  const [type, setType] = useState([0, 0]); // 0 -> Origin, 1 -> Genesis\n\n  const [classes, setClasses] = useState([3]); // Empty = All\n\n  const [graphData, setGraphData] = useState([[], [], []]);\n  const [graphDataColors, setGraphDataColors] = useState([[]]);\n  const [graphMenu, setGraphMenu] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [applyChanges, setApplyChanges] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    fetchData(breed, legend, purity, stage, type, classes, (err, res) => {\n      if (!err) {\n        let allArrays = [];\n        let tempColors = [];\n\n        if (stage === 1) {\n          for (let i = 0; i < res.length; i++) {\n            let currentArray = res[i];\n            let temp = [];\n\n            for (let j = 0; j < currentArray.length; j++) {\n              if (currentArray[j].data.length > 0 && (classes.length === 0 || classes.indexOf(j + 1) >= 0)) {\n                temp.push(currentArray[j]);\n                tempColors.push(colors[j]);\n              }\n            }\n\n            allArrays.push(temp);\n          }\n        }\n\n        setGraphData(stage === 1 ? allArrays : res);\n        setGraphDataColors(stage === 1 ? tempColors : ['#1370F6']);\n        setLoading(false);\n      }\n    });\n  }, [applyChanges]);\n  return /*#__PURE__*/_jsxDEV(Prices, {\n    breed: breed,\n    setBreed: setBreed,\n    legend: legend,\n    setLegend: setLegend,\n    purity: purity,\n    setPurity: setPurity,\n    stage: stage,\n    setStage: setStage,\n    type: type,\n    setType: setType,\n    classes: classes,\n    setClasses: setClasses,\n    graphData: graphData,\n    graphMenu: graphMenu,\n    setGraphMenu: setGraphMenu,\n    graphDataColors: graphDataColors,\n    loading: loading,\n    applyChanges: applyChanges,\n    setApplyChanges: setApplyChanges\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PricesContainer, \"1AJPj8p2VzEas7G1oIwiWE2ADsw=\");\n\n_c = PricesContainer;\nexport default PricesContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PricesContainer\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/games/crabada/Prices/PricesContainer.js"],"names":["React","useEffect","useState","Prices","axios","cancelToken","fetchData","breed","legend","purity","stage","type","classes","callback","undefined","cancel","CancelToken","source","response","get","params","breedMin","breedMax","legendMin","legendMax","purityMin","purityMax","isOrigin","isGenesis","token","data","e","colors","PricesContainer","setBreed","setLegend","setPurity","setStage","setType","setClasses","graphData","setGraphData","graphDataColors","setGraphDataColors","graphMenu","setGraphMenu","loading","setLoading","applyChanges","setApplyChanges","err","res","allArrays","tempColors","i","length","currentArray","temp","j","indexOf","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Prices from './Prices'\nimport axios from 'axios'\n\nlet cancelToken\nconst fetchData = async (\n  breed,\n  legend,\n  purity,\n  stage,\n  type,\n  classes,\n  callback,\n) => {\n  try {\n    if (typeof cancelToken !== typeof undefined) {\n      cancelToken.cancel('Canceling previous request...')\n    }\n\n    cancelToken = axios.CancelToken.source()\n    const response = await axios.get(\n      'http://localhost:8080/crabada/getPrices',\n      {\n        params: {\n          breedMin: stage ? breed[0] : 0,\n          breedMax: stage ? breed[1] : 0,\n          legendMin: stage ? legend[0] : 0,\n          legendMax: stage ? legend[1] : 0,\n          purityMin: stage ? purity[0] : 0,\n          purityMax: stage ? purity[1] : 0,\n          stage: stage,\n          isOrigin: stage && type[0] ? 1 : 0,\n          isGenesis: stage && type[1] ? 1 : 0,\n          classes: stage ? classes : false,\n        },\n        cancelToken: cancelToken.token,\n      },\n    )\n    callback(null, response.data.data)\n  } catch (e) {\n    callback(e)\n  }\n}\n\nconst colors = [\n  '#FC252B',\n  '#108C8C',\n  '#C9B22E',\n  '#793024',\n  '#0068EC',\n  '#533FB4',\n  '#EC2C9E',\n  '#34A527',\n]\nfunction PricesContainer() {\n  const [breed, setBreed] = useState([0, 5])\n  const [legend, setLegend] = useState([0, 6])\n  const [purity, setPurity] = useState([0, 6])\n\n  const [stage, setStage] = useState(1) // 0 -> Egg, 1 -> Adult,\n  const [type, setType] = useState([0, 0]) // 0 -> Origin, 1 -> Genesis\n  const [classes, setClasses] = useState([3]) // Empty = All\n\n  const [graphData, setGraphData] = useState([[], [], []])\n  const [graphDataColors, setGraphDataColors] = useState([[]])\n  const [graphMenu, setGraphMenu] = useState(0)\n  const [loading, setLoading] = useState(true)\n  const [applyChanges, setApplyChanges] = useState(true)\n  useEffect(() => {\n    setLoading(true)\n    fetchData(breed, legend, purity, stage, type, classes, (err, res) => {\n      if (!err) {\n        let allArrays = []\n        let tempColors = []\n        if (stage === 1) {\n          for (let i = 0; i < res.length; i++) {\n            let currentArray = res[i]\n            let temp = []\n            for (let j = 0; j < currentArray.length; j++) {\n              if (\n                currentArray[j].data.length > 0 &&\n                (classes.length === 0 || classes.indexOf(j + 1) >= 0)\n              ) {\n                temp.push(currentArray[j])\n                tempColors.push(colors[j])\n              }\n            }\n            allArrays.push(temp)\n          }\n        }\n        setGraphData(stage === 1 ? allArrays : res)\n        setGraphDataColors(stage === 1 ? tempColors : ['#1370F6'])\n        setLoading(false)\n      }\n    })\n  }, [applyChanges])\n\n  return (\n    <Prices\n      breed={breed}\n      setBreed={setBreed}\n      legend={legend}\n      setLegend={setLegend}\n      purity={purity}\n      setPurity={setPurity}\n      stage={stage}\n      setStage={setStage}\n      type={type}\n      setType={setType}\n      classes={classes}\n      setClasses={setClasses}\n      graphData={graphData}\n      graphMenu={graphMenu}\n      setGraphMenu={setGraphMenu}\n      graphDataColors={graphDataColors}\n      loading={loading}\n      applyChanges={applyChanges}\n      setApplyChanges={setApplyChanges}\n    />\n  )\n}\n\nexport default PricesContainer\n"]},"metadata":{},"sourceType":"module"}