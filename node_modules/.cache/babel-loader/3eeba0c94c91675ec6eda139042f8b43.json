{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\games\\\\crabada\\\\Economy\\\\EconomyContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Economy from './Economy';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchData = async (table, timeRange, callback) => {\n  try {\n    let response = await axios.get( // 'https://p2eanalytics.com/crabada/getEconomy',\n    // 'https://'+tokenData+'/economy/marketplace',\n    'http://localhost:8080/crabada/getEconomy', {\n      params: {\n        table: table,\n        timeRange: timeRange\n      }\n    });\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nfunction EconomyContainer() {\n  _s();\n\n  const [menus, setMenus] = useState([0, 0]);\n  const [timeFilter, setTimeFilter] = useState(['all', 'all']);\n  const [marketplaceData, setMarketplaceData] = useState([[]]);\n  const [tokenData, setTokenData] = useState([[]]);\n  const [tokenMinMax, setTokenMinMax] = useState([['auto', 'auto'], ['auto', 'auto']]);\n  const [marketMinMax, setMarketMinMax] = useState([['auto', 'auto'], ['auto', 'auto'], ['auto', 'auto']]);\n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [{\n      \"timestamp\": 1650369600000,\n      \"unitsSold\": 54,\n      \"averageNativeVolume\": 1127116000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20872518518518518518518,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650373200000,\n      \"unitsSold\": 68,\n      \"averageNativeVolume\": 1391438000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20462323529411764705882,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650376800000,\n      \"unitsSold\": 56,\n      \"averageNativeVolume\": 1207184000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 21556857142857142857142,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650380400000,\n      \"unitsSold\": 137,\n      \"averageNativeVolume\": 2697732000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 19691474452554744525547,\n      \"averageUSDPrice\": 0\n    }]\n  };\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market);\n\n      if (!err) {\n        let salesMin = 99999999999999;\n        let salesMax = -1; // let salesArray = market[0][0]['data']\n\n        let salesArray = temp.data;\n        console.log(salesArray);\n        let salesArr,\n            averageArr,\n            soldArr = [];\n\n        for (let i = 0; i < salesArray.length; i++) {\n          let timestamp = salesArray[i].timestamp; //Example -> in ms\n\n          const date = new Date(timestamp);\n          const result = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n          let marketArray = [];\n          salesArr.push({\n            'x': result,\n            'y': salesArray[i].unitsSold\n          });\n\n          if (salesArray[i]['unitsSold'] < salesMin) {\n            salesMin = salesArray[i]['unitsSold'];\n            console.log(salesMin);\n          }\n\n          if (salesArray[i]['unitsSold'] > salesMax) {\n            salesMax = salesArray[i]['unitsSold'];\n            console.log(salesMax);\n          }\n        }\n\n        console.log('salesArr', salesArr);\n        let averageMin = 99999999999999;\n        let averageMax = -1;\n        let averageArray = market[1][0]['data'];\n\n        for (let i = 0; i < averageArray.length; i++) {\n          if (averageArray[i]['y'] < averageMin) {\n            averageMin = averageArray[i]['y'];\n          }\n\n          if (averageArray[i]['y'] > averageMax) {\n            averageMax = averageArray[i]['y'];\n          }\n        }\n\n        let countMin = 99999999999999;\n        let countMax = -1;\n        let countArray = market[2][0]['data'];\n\n        for (let i = 0; i < countArray.length; i++) {\n          if (countArray[i]['y'] < countMin) {\n            countMin = countArray[i]['y'];\n          }\n\n          if (countArray[i]['y'] > countMax) {\n            countMax = countArray[i]['y'];\n          }\n        }\n\n        salesMin = salesMin * 0.4;\n        salesMax = salesMax * 1.2;\n        averageMin = averageMin * 0.4;\n        averageMax = averageMax * 1.2;\n        countMin = countMin * 0.4;\n        countMax = countMax * 1.2;\n        setMarketplaceData(market);\n        setMarketMinMax([[salesMin, salesMax], [averageMin, averageMax], [countMin, countMax]]);\n      }\n    });\n  }, [timeFilter[0]]);\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      if (!err) {\n        let netSupplyMin = 99999999999999;\n        let netSupplyMax = -1;\n        let supplyArray = token[0][0]['data'];\n\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y'];\n          }\n\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y'];\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2;\n        netSupplyMin = netSupplyMin * 0.3;\n        setTokenData(token);\n        setTokenMinMax([[netSupplyMin, netSupplyMax], ['auto', 'auto']]);\n      }\n    });\n  }, [timeFilter[1]]);\n  return /*#__PURE__*/_jsxDEV(Economy, {\n    menus: menus,\n    setMenus: setMenus,\n    market: marketplaceData,\n    token: tokenData,\n    timeFilter: timeFilter,\n    setTimeFilter: setTimeFilter,\n    tokenMinMax: tokenMinMax,\n    marketMinMax: marketMinMax\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EconomyContainer, \"p+CoX6ZcRU6Ax6QojM9wp8Dc5E8=\");\n\n_c = EconomyContainer;\nexport default EconomyContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EconomyContainer\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/games/crabada/Economy/EconomyContainer.js"],"names":["React","useState","useEffect","useCallback","Economy","axios","fetchData","table","timeRange","callback","response","get","params","data","e","EconomyContainer","menus","setMenus","timeFilter","setTimeFilter","marketplaceData","setMarketplaceData","tokenData","setTokenData","tokenMinMax","setTokenMinMax","marketMinMax","setMarketMinMax","temp","err","market","console","log","salesMin","salesMax","salesArray","salesArr","averageArr","soldArr","i","length","timestamp","date","Date","result","getDate","getMonth","getFullYear","marketArray","push","unitsSold","averageMin","averageMax","averageArray","countMin","countMax","countArray","token","netSupplyMin","netSupplyMax","supplyArray"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport Economy from './Economy'\nimport axios from 'axios'\n\nconst fetchData = async (table, timeRange, callback) => {\n  try {\n    let response = await axios.get(\n      // 'https://p2eanalytics.com/crabada/getEconomy',\n      // 'https://'+tokenData+'/economy/marketplace',\n      'http://localhost:8080/crabada/getEconomy',\n\n      {\n        params: {\n          table: table,\n          timeRange: timeRange,\n        },\n      },\n    );\n    callback(null, response.data.data)\n  } catch (e) {\n    callback(e)\n  }\n}\n\nfunction EconomyContainer() {\n  const [menus, setMenus] = useState([0, 0])\n  const [timeFilter, setTimeFilter] = useState(['all', 'all'])\n  const [marketplaceData, setMarketplaceData] = useState([[]])\n  const [tokenData, setTokenData] = useState([[]])\n  const [tokenMinMax, setTokenMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  const [marketMinMax, setMarketMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  \n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [\n        {\n            \"timestamp\": 1650369600000,\n            \"unitsSold\": 54,\n            \"averageNativeVolume\": 1127116000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20872518518518518518518,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650373200000,\n            \"unitsSold\": 68,\n            \"averageNativeVolume\": 1391438000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20462323529411764705882,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650376800000,\n            \"unitsSold\": 56,\n            \"averageNativeVolume\": 1207184000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 21556857142857142857142,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650380400000,\n            \"unitsSold\": 137,\n            \"averageNativeVolume\": 2697732000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 19691474452554744525547,\n            \"averageUSDPrice\": 0\n        },\t\t\t\t\n\t\t]\n}\n\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market)\n      if (!err) {\n        let salesMin = 99999999999999\n        let salesMax = -1\n        // let salesArray = market[0][0]['data']\n        let salesArray = temp.data;\n        console.log(salesArray)\n         let salesArr,\n           averageArr,\n           soldArr = [];\n        for (let i = 0; i < salesArray.length; i++) {\n\n          let timestamp = salesArray[i].timestamp; //Example -> in ms\n          const date = new Date(timestamp);\n          const result = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n          let marketArray =[]\n         \n          salesArr.push({'x': result, 'y': salesArray[i].unitsSold})\n\n          if (salesArray[i]['unitsSold'] < salesMin) {\n            salesMin = salesArray[i]['unitsSold'];\n            console.log(salesMin);\n          }\n          if (salesArray[i]['unitsSold'] > salesMax) {\n            salesMax = salesArray[i]['unitsSold'];\n            console.log(salesMax);\n          }\n        }\n        console.log('salesArr', salesArr)\n        let averageMin = 99999999999999\n        let averageMax = -1\n        let averageArray = market[1][0]['data']\n        for (let i = 0; i < averageArray.length; i++) {\n          if (averageArray[i]['y'] < averageMin) {\n            averageMin = averageArray[i]['y']\n          }\n          if (averageArray[i]['y'] > averageMax) {\n            averageMax = averageArray[i]['y']\n          }\n        }\n        let countMin = 99999999999999\n        let countMax = -1\n        let countArray = market[2][0]['data']\n        for (let i = 0; i < countArray.length; i++) {\n          if (countArray[i]['y'] < countMin) {\n            countMin = countArray[i]['y']\n          }\n          if (countArray[i]['y'] > countMax) {\n            countMax = countArray[i]['y']\n          }\n        }\n\n        salesMin = salesMin * 0.4\n        salesMax = salesMax * 1.2\n        averageMin = averageMin * 0.4\n        averageMax = averageMax * 1.2\n        countMin = countMin * 0.4\n        countMax = countMax * 1.2\n\n        setMarketplaceData(market)\n        setMarketMinMax([\n          [salesMin, salesMax],\n          [averageMin, averageMax],\n          [countMin, countMax],\n        ])\n      }\n    })\n  }, [timeFilter[0]])\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      if (!err) {\n        let netSupplyMin = 99999999999999\n        let netSupplyMax = -1\n\n        let supplyArray = token[0][0]['data']\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y']\n          }\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y']\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2\n        netSupplyMin = netSupplyMin * 0.3\n\n        setTokenData(token)\n        setTokenMinMax([\n          [netSupplyMin, netSupplyMax],\n          ['auto', 'auto'],\n        ])\n      }\n    })\n  }, [timeFilter[1]])\n  return (\n    <Economy\n      menus={menus}\n      setMenus={setMenus}\n      market={marketplaceData}\n      token={tokenData}\n      timeFilter={timeFilter}\n      setTimeFilter={setTimeFilter}\n      tokenMinMax={tokenMinMax}\n      marketMinMax={marketMinMax}\n    />\n  )\n}\n\nexport default EconomyContainer\n"]},"metadata":{},"sourceType":"module"}