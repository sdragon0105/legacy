{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\games\\\\crabada\\\\Economy\\\\EconomyContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Economy from './Economy';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = '';\n\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n\n    default:\n      break;\n  }\n\n  try {\n    let response = await axios.get( // 'https://p2eanalytics.com/crabada/getEconomy',\n    'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace', {\n      params: {\n        // table: table,\n        // timeRange: timeRange,\n        frequency: frequencParam\n      }\n    });\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nfunction EconomyContainer() {\n  _s();\n\n  const [menus, setMenus] = useState([0, 0]);\n  const [timeFilter, setTimeFilter] = useState(['all', 'all']);\n  const [marketplaceData, setMarketplaceData] = useState([[]]);\n  const [tokenData, setTokenData] = useState([[]]);\n  const [tokenMinMax, setTokenMinMax] = useState([['auto', 'auto'], ['auto', 'auto']]);\n  const [marketMinMax, setMarketMinMax] = useState([['auto', 'auto'], ['auto', 'auto'], ['auto', 'auto']]);\n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [{\n      \"timestamp\": 1650369600000,\n      \"unitsSold\": 54,\n      \"averageNativeVolume\": 1127116000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20872518518518518518518,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650373200000,\n      \"unitsSold\": 68,\n      \"averageNativeVolume\": 1391438000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 20462323529411764705882,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650376800000,\n      \"unitsSold\": 56,\n      \"averageNativeVolume\": 1207184000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 21556857142857142857142,\n      \"averageUSDPrice\": 0\n    }, {\n      \"timestamp\": 1650380400000,\n      \"unitsSold\": 137,\n      \"averageNativeVolume\": 2697732000000000000000000,\n      \"averageUSDVolume\": 0,\n      \"averageNativePrice\": 19691474452554744525547,\n      \"averageUSDPrice\": 0\n    }]\n  };\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market); // if (!err) {\n\n      let salesMin = 99999999999999;\n      let salesMax = -1; // let salesArray = market[0][0]['data']\n\n      let salesArray = temp.data;\n      console.log('salesArray', salesArray);\n      let salesArr = [];\n      let marketArray = [];\n\n      for (let i = 0; i < salesArray.length; i++) {\n        let timestamp = salesArray[i].timestamp; //Example -> in ms\n\n        const date = new Date(timestamp);\n        const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n        salesArr.push({\n          x: dateResult,\n          y: salesArray[i].averageNativeVolume / Math.pow(10, 18)\n        });\n\n        if (salesArray[i]['averageNativeVolume'] < salesMin) {\n          salesMin = salesArray[i]['averageNativeVolume'];\n          console.log(salesMin);\n        }\n\n        if (salesArray[i]['averageNativeVolume'] > salesMax) {\n          salesMax = salesArray[i]['averageNativeVolume'];\n          console.log(salesMax);\n        }\n      }\n\n      console.log('salesArr', salesArr);\n      marketArray.push([{\n        'id': 'Sales',\n        'data': salesArr\n      }]);\n      marketArray.push([{\n        'id': 'Average Price',\n        'data': salesArr\n      }]);\n      marketArray.push([{\n        'id': 'Crabada Sold',\n        'data': salesArr\n      }]);\n      console.log('marketArray', marketArray);\n      let averageMin = 99999999999999;\n      let averageMax = -1;\n      let averageArray = market[1][0]['data'];\n\n      for (let i = 0; i < averageArray.length; i++) {\n        if (averageArray[i]['y'] < averageMin) {\n          averageMin = averageArray[i]['y'];\n        }\n\n        if (averageArray[i]['y'] > averageMax) {\n          averageMax = averageArray[i]['y'];\n        }\n      }\n\n      let countMin = 99999999999999;\n      let countMax = -1;\n      let countArray = market[2][0]['data'];\n\n      for (let i = 0; i < countArray.length; i++) {\n        if (countArray[i]['y'] < countMin) {\n          countMin = countArray[i]['y'];\n        }\n\n        if (countArray[i]['y'] > countMax) {\n          countMax = countArray[i]['y'];\n        }\n      }\n\n      salesMin = salesMin * 0.4;\n      salesMax = salesMax * 1.2;\n      averageMin = averageMin * 0.4;\n      averageMax = averageMax * 1.2;\n      countMin = countMin * 0.4;\n      countMax = countMax * 1.2; // setMarketplaceData(market)\n\n      setMarketplaceData(marketArray);\n      setMarketMinMax([[salesMin, salesMax], [averageMin, averageMax], [countMin, countMax]]); // }\n    });\n  }, [timeFilter[0]]);\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      console.log('token', token);\n\n      if (!err) {\n        let netSupplyMin = 99999999999999;\n        let netSupplyMax = -1;\n        let supplyArray = token[0][0]['data'];\n\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y'];\n          }\n\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y'];\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2;\n        netSupplyMin = netSupplyMin * 0.3;\n        setTokenData(token);\n        setTokenMinMax([[netSupplyMin, netSupplyMax], ['auto', 'auto']]);\n      }\n    });\n  }, [timeFilter[1]]);\n  return /*#__PURE__*/_jsxDEV(Economy, {\n    menus: menus,\n    setMenus: setMenus,\n    market: marketplaceData,\n    token: tokenData,\n    timeFilter: timeFilter,\n    setTimeFilter: setTimeFilter,\n    tokenMinMax: tokenMinMax,\n    marketMinMax: marketMinMax\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EconomyContainer, \"p+CoX6ZcRU6Ax6QojM9wp8Dc5E8=\");\n\n_c = EconomyContainer;\nexport default EconomyContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EconomyContainer\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/games/crabada/Economy/EconomyContainer.js"],"names":["React","useState","useEffect","useCallback","Economy","axios","fetchData","table","timeRange","callback","frequencParam","response","get","params","frequency","data","e","EconomyContainer","menus","setMenus","timeFilter","setTimeFilter","marketplaceData","setMarketplaceData","tokenData","setTokenData","tokenMinMax","setTokenMinMax","marketMinMax","setMarketMinMax","temp","err","market","console","log","salesMin","salesMax","salesArray","salesArr","marketArray","i","length","timestamp","date","Date","dateResult","getDate","getMonth","getFullYear","push","x","y","averageNativeVolume","Math","pow","averageMin","averageMax","averageArray","countMin","countMax","countArray","token","netSupplyMin","netSupplyMax","supplyArray"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport Economy from './Economy'\nimport axios from 'axios'\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = ''\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n    default: break;\n  }\n  try {\n    let response = await axios.get(\n      // 'https://p2eanalytics.com/crabada/getEconomy',\n      'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace',\n      {\n        params: {\n          // table: table,\n          // timeRange: timeRange,\n          frequency: frequencParam,\n        },\n      },\n    );\n    callback(null, response.data.data)\n  } catch (e) {\n    callback(e)\n  }\n}\n\nfunction EconomyContainer() {\n  const [menus, setMenus] = useState([0, 0])\n  const [timeFilter, setTimeFilter] = useState(['all', 'all'])\n  const [marketplaceData, setMarketplaceData] = useState([[]])\n  const [tokenData, setTokenData] = useState([[]])\n  const [tokenMinMax, setTokenMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  const [marketMinMax, setMarketMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ])\n  \n  const temp = {\n    \"erc721Id\": \"erc721:62646d9538af487750b95e33\",\n    \"nativeCurrencyId\": \"erc20:6265913a2d30e71b11d446f6\",\n    \"data\": [\n        {\n            \"timestamp\": 1650369600000,\n            \"unitsSold\": 54,\n            \"averageNativeVolume\": 1127116000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20872518518518518518518,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650373200000,\n            \"unitsSold\": 68,\n            \"averageNativeVolume\": 1391438000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 20462323529411764705882,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650376800000,\n            \"unitsSold\": 56,\n            \"averageNativeVolume\": 1207184000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 21556857142857142857142,\n            \"averageUSDPrice\": 0\n        },\n        {\n            \"timestamp\": 1650380400000,\n            \"unitsSold\": 137,\n            \"averageNativeVolume\": 2697732000000000000000000,\n            \"averageUSDVolume\": 0,\n            \"averageNativePrice\": 19691474452554744525547,\n            \"averageUSDPrice\": 0\n        },\t\t\t\t\n\t\t]\n}\n\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      console.log('market', market)\n      // if (!err) {\n        let salesMin = 99999999999999\n        let salesMax = -1\n        // let salesArray = market[0][0]['data']\n        let salesArray = temp.data;\n        console.log('salesArray',salesArray)\n        let salesArr = [];\n        let marketArray = [];\n         \n        for (let i = 0; i < salesArray.length; i++) {\n\n          let timestamp = salesArray[i].timestamp; //Example -> in ms\n          const date = new Date(timestamp);\n          const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n          \n          salesArr.push({ x: dateResult, y: salesArray[i].averageNativeVolume / Math.pow(10, 18) });\n\n          if (salesArray[i]['averageNativeVolume'] < salesMin) {\n            salesMin = salesArray[i]['averageNativeVolume'];\n            console.log(salesMin);\n          }\n          if (salesArray[i]['averageNativeVolume'] > salesMax) {\n            salesMax = salesArray[i]['averageNativeVolume'];\n            console.log(salesMax);\n          }\n        }\n        console.log('salesArr', salesArr)\n        marketArray.push([{'id': 'Sales', 'data': salesArr}])\n        marketArray.push([{'id': 'Average Price', 'data': salesArr }]);\n        marketArray.push([{'id': 'Crabada Sold', 'data': salesArr }]);\n        console.log('marketArray', marketArray);\n\n        let averageMin = 99999999999999\n        let averageMax = -1\n        let averageArray = market[1][0]['data']\n        for (let i = 0; i < averageArray.length; i++) {\n          if (averageArray[i]['y'] < averageMin) {\n            averageMin = averageArray[i]['y']\n          }\n          if (averageArray[i]['y'] > averageMax) {\n            averageMax = averageArray[i]['y']\n          }\n        }\n        let countMin = 99999999999999\n        let countMax = -1\n        let countArray = market[2][0]['data']\n        for (let i = 0; i < countArray.length; i++) {\n          if (countArray[i]['y'] < countMin) {\n            countMin = countArray[i]['y']\n          }\n          if (countArray[i]['y'] > countMax) {\n            countMax = countArray[i]['y']\n          }\n        }\n\n        salesMin = salesMin * 0.4\n        salesMax = salesMax * 1.2\n        averageMin = averageMin * 0.4\n        averageMax = averageMax * 1.2\n        countMin = countMin * 0.4\n        countMax = countMax * 1.2\n\n        // setMarketplaceData(market)\n        setMarketplaceData(marketArray)\n\n        setMarketMinMax([\n          [salesMin, salesMax],\n          [averageMin, averageMax],\n          [countMin, countMax],\n        ])\n      // }\n    })\n  }, [timeFilter[0]])\n  useEffect(() => {\n    fetchData('TUS', timeFilter[1], (err, token) => {\n      console.log('token',token)\n      if (!err) {\n        let netSupplyMin = 99999999999999\n        let netSupplyMax = -1\n\n        let supplyArray = token[0][0]['data']\n        for (let i = 0; i < supplyArray.length; i++) {\n          if (supplyArray[i]['y'] < netSupplyMin) {\n            netSupplyMin = supplyArray[i]['y']\n          }\n          if (supplyArray[i]['y'] > netSupplyMax) {\n            netSupplyMax = supplyArray[i]['y']\n          }\n        }\n\n        netSupplyMax = netSupplyMax * 1.2\n        netSupplyMin = netSupplyMin * 0.3\n\n        setTokenData(token)\n        setTokenMinMax([\n          [netSupplyMin, netSupplyMax],\n          ['auto', 'auto'],\n        ])\n      }\n    })\n  }, [timeFilter[1]])\n  return (\n    <Economy\n      menus={menus}\n      setMenus={setMenus}\n      market={marketplaceData}\n      token={tokenData}\n      timeFilter={timeFilter}\n      setTimeFilter={setTimeFilter}\n      tokenMinMax={tokenMinMax}\n      marketMinMax={marketMinMax}\n    />\n  )\n}\n\nexport default EconomyContainer\n"]},"metadata":{},"sourceType":"module"}