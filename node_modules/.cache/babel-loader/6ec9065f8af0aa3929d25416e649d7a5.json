{"ast":null,"code":"import { useMemo as n, Fragment as e, createElement as i, useRef as o, useState as t, useCallback as r } from \"react\";\nimport { Container as l, useDimensions as u, SvgWrapper as a, ResponsiveWrapper as d, getRelativeCursor as s } from \"@nivo/core\";\nimport { scaleLinear as c } from \"d3-scale\";\nimport { Delaunay as h } from \"d3-delaunay\";\nimport { jsx as f, jsxs as v, Fragment as p } from \"react/jsx-runtime\";\n\nfunction m() {\n  return m = Object.assign || function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n\n      for (var o in i) {\n        Object.prototype.hasOwnProperty.call(i, o) && (n[o] = i[o]);\n      }\n    }\n\n    return n;\n  }, m.apply(this, arguments);\n}\n\nvar y = {\n  xDomain: [0, 1],\n  yDomain: [0, 1],\n  layers: [\"links\", \"cells\", \"points\", \"bounds\"],\n  enableLinks: !1,\n  linkLineWidth: 1,\n  linkLineColor: \"#bbbbbb\",\n  enableCells: !0,\n  cellLineWidth: 2,\n  cellLineColor: \"#000000\",\n  enablePoints: !0,\n  pointSize: 4,\n  pointColor: \"#666666\",\n  role: \"img\"\n},\n    g = function g(n) {\n  return \"function\" == typeof n ? n : function (e) {\n    return e[n];\n  };\n},\n    b = function b(n) {\n  var e = n.points,\n      i = n.x,\n      o = void 0 === i ? \"x\" : i,\n      t = n.y,\n      r = void 0 === t ? \"y\" : t,\n      l = g(o),\n      u = g(r);\n  return e.map(function (n) {\n    return [l(n), u(n)];\n  });\n},\n    k = function k(n) {\n  var e = n.points,\n      i = n.width,\n      o = n.height,\n      t = n.debug,\n      r = h.from(e),\n      l = t ? r.voronoi([0, 0, i, o]) : void 0;\n  return {\n    delaunay: r,\n    voronoi: l\n  };\n},\n    x = function x(e) {\n  var i = e.points,\n      o = e.x,\n      t = e.y,\n      r = e.width,\n      l = e.height,\n      u = e.debug,\n      a = n(function () {\n    return b({\n      points: i,\n      x: o,\n      y: t\n    });\n  }, [i, o, t]);\n  return n(function () {\n    return k({\n      points: a,\n      width: r,\n      height: l,\n      debug: u\n    });\n  }, [a, r, l, u]);\n},\n    C = function C(e) {\n  var i = e.data,\n      o = e.width,\n      t = e.height,\n      r = e.xDomain,\n      l = e.yDomain,\n      u = n(function () {\n    return c().domain(r).range([0, o]);\n  }, [r, o]),\n      a = n(function () {\n    return c().domain(l).range([0, t]);\n  }, [l, t]),\n      d = n(function () {\n    return i.map(function (n) {\n      return {\n        x: u(n.x),\n        y: a(n.y),\n        data: n\n      };\n    });\n  }, [i, u, a]);\n  return n(function () {\n    var n = h.from(d.map(function (n) {\n      return [n.x, n.y];\n    })),\n        e = n.voronoi([0, 0, o, t]);\n    return {\n      points: d,\n      delaunay: n,\n      voronoi: e\n    };\n  }, [d, o, t]);\n},\n    L = function L(e) {\n  var i = e.points,\n      o = e.delaunay,\n      t = e.voronoi;\n  return n(function () {\n    return {\n      points: i,\n      delaunay: o,\n      voronoi: t\n    };\n  }, [i, o, t]);\n},\n    w = [\"theme\"],\n    W = function W(n) {\n  var o = n.data,\n      t = n.width,\n      r = n.height,\n      l = n.margin,\n      d = n.layers,\n      s = void 0 === d ? y.layers : d,\n      c = n.xDomain,\n      h = void 0 === c ? y.xDomain : c,\n      v = n.yDomain,\n      p = void 0 === v ? y.yDomain : v,\n      m = n.enableLinks,\n      g = void 0 === m ? y.enableLinks : m,\n      b = n.linkLineWidth,\n      k = void 0 === b ? y.linkLineWidth : b,\n      x = n.linkLineColor,\n      w = void 0 === x ? y.linkLineColor : x,\n      W = n.enableCells,\n      D = void 0 === W ? y.enableCells : W,\n      M = n.cellLineWidth,\n      P = void 0 === M ? y.cellLineWidth : M,\n      O = n.cellLineColor,\n      S = void 0 === O ? y.cellLineColor : O,\n      j = n.enablePoints,\n      z = void 0 === j ? y.enableCells : j,\n      A = n.pointSize,\n      E = void 0 === A ? y.pointSize : A,\n      H = n.pointColor,\n      B = void 0 === H ? y.pointColor : H,\n      F = n.role,\n      I = void 0 === F ? y.role : F,\n      q = u(t, r, l),\n      G = q.outerWidth,\n      J = q.outerHeight,\n      K = q.margin,\n      N = q.innerWidth,\n      Q = q.innerHeight,\n      R = C({\n    data: o,\n    width: N,\n    height: Q,\n    xDomain: h,\n    yDomain: p\n  }),\n      T = R.points,\n      U = R.delaunay,\n      V = R.voronoi,\n      X = {\n    links: null,\n    cells: null,\n    points: null,\n    bounds: null\n  };\n  g && s.includes(\"links\") && (X.links = f(\"path\", {\n    stroke: w,\n    strokeWidth: k,\n    fill: \"none\",\n    d: U.render()\n  }, \"links\")), D && s.includes(\"cells\") && (X.cells = f(\"path\", {\n    d: V.render(),\n    fill: \"none\",\n    stroke: S,\n    strokeWidth: P\n  }, \"cells\")), z && s.includes(\"points\") && (X.points = f(\"path\", {\n    stroke: \"none\",\n    fill: B,\n    d: U.renderPoints(void 0, E / 2)\n  }, \"points\")), s.includes(\"bounds\") && (X.bounds = f(\"path\", {\n    fill: \"none\",\n    stroke: S,\n    strokeWidth: P,\n    d: V.renderBounds()\n  }, \"bounds\"));\n  var Y = L({\n    points: T,\n    delaunay: U,\n    voronoi: V\n  });\n  return f(a, {\n    width: G,\n    height: J,\n    margin: K,\n    role: I,\n    children: s.map(function (n, o) {\n      return void 0 !== X[n] ? X[n] : \"function\" == typeof n ? f(e, {\n        children: i(n, Y)\n      }, o) : null;\n    })\n  });\n},\n    D = function D(n) {\n  var e = n.theme,\n      i = function (n, e) {\n    if (null == n) return {};\n    var i,\n        o,\n        t = {},\n        r = Object.keys(n);\n\n    for (o = 0; o < r.length; o++) {\n      i = r[o], e.indexOf(i) >= 0 || (t[i] = n[i]);\n    }\n\n    return t;\n  }(n, w);\n\n  return f(l, {\n    isInteractive: !1,\n    animate: !1,\n    theme: e,\n    children: f(W, m({}, i))\n  });\n},\n    M = function M(n) {\n  return f(d, {\n    children: function children(e) {\n      var i = e.width,\n          o = e.height;\n      return f(D, m({\n        width: i,\n        height: o\n      }, n));\n    }\n  });\n},\n    P = function P(e) {\n  var i = e.nodes,\n      l = e.width,\n      u = e.height,\n      a = e.x,\n      d = e.y,\n      c = e.onMouseEnter,\n      h = e.onMouseMove,\n      m = e.onMouseLeave,\n      y = e.onClick,\n      g = e.debug,\n      b = o(null),\n      k = t(null),\n      C = k[0],\n      L = k[1],\n      w = x({\n    points: i,\n    x: a,\n    y: d,\n    width: l,\n    height: u,\n    debug: g\n  }),\n      W = w.delaunay,\n      D = w.voronoi,\n      M = n(function () {\n    if (g && D) return D.render();\n  }, [g, D]),\n      P = r(function (n) {\n    if (!b.current) return [null, null];\n    var e = s(b.current, n),\n        o = e[0],\n        t = e[1],\n        r = W.find(o, t);\n    return [r, void 0 !== r ? i[r] : null];\n  }, [b, W]),\n      O = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == c || c(o, n));\n  }, [P, L, c]),\n      S = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == h || h(o, n));\n  }, [P, L, h]),\n      j = r(function (n) {\n    if (L(null), m) {\n      var e = void 0;\n      null !== C && (e = i[C]), e && m(e, n);\n    }\n  }, [L, C, m, i]),\n      z = r(function (n) {\n    var e = P(n),\n        i = e[0],\n        o = e[1];\n    L(i), o && (null == y || y(o, n));\n  }, [P, L, y]);\n  return v(\"g\", {\n    ref: b,\n    children: [g && D && v(p, {\n      children: [f(\"path\", {\n        d: M,\n        stroke: \"red\",\n        strokeWidth: 1,\n        opacity: .75\n      }), null !== C && f(\"path\", {\n        fill: \"pink\",\n        opacity: .35,\n        d: D.renderCell(C)\n      })]\n    }), f(\"rect\", {\n      width: l,\n      height: u,\n      fill: \"red\",\n      opacity: 0,\n      style: {\n        cursor: \"auto\"\n      },\n      onMouseEnter: O,\n      onMouseMove: S,\n      onMouseLeave: j,\n      onClick: z\n    })]\n  });\n},\n    O = function O(n, e) {\n  n.save(), n.globalAlpha = .75, n.beginPath(), e.render(n), n.strokeStyle = \"red\", n.lineWidth = 1, n.stroke(), n.restore();\n},\n    S = function S(n, e, i) {\n  n.save(), n.globalAlpha = .35, n.beginPath(), e.renderCell(i, n), n.fillStyle = \"red\", n.fill(), n.restore();\n};\n\nexport { P as Mesh, M as ResponsiveVoronoi, D as Voronoi, k as computeMesh, b as computeMeshPoints, y as defaultVoronoiProps, S as renderVoronoiCellToCanvas, O as renderVoronoiToCanvas, C as useVoronoi, L as useVoronoiLayerContext, x as useVoronoiMesh };","map":{"version":3,"mappings":"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","names":["defaultVoronoiProps","xDomain","yDomain","layers","enableLinks","linkLineWidth","linkLineColor","enableCells","cellLineWidth","cellLineColor","enablePoints","pointSize","pointColor","role","getAccessor","directive","datum","computeMeshPoints","points","x","i","t","y","getX","getY","map","point","computeMesh","width","height","debug","delaunay","Delaunay","from","voronoi","undefined","useVoronoiMesh","points2d","useMemo","useVoronoi","data","xScale","scaleLinear","domain","range","yScale","d","p","useVoronoiLayerContext","InnerVoronoi","partialMargin","margin","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","links","cells","bounds","includes","_jsx","stroke","strokeWidth","fill","render","renderPoints","renderBounds","layerContext","SvgWrapper","layer","Fragment","createElement","Voronoi","theme","otherProps","Container","isInteractive","animate","ResponsiveVoronoi","props","ResponsiveWrapper","Mesh","nodes","onMouseEnter","onMouseMove","onMouseLeave","onClick","elementRef","useRef","k","useState","currentIndex","setCurrentIndex","voronoiPath","getIndexAndNodeFromEvent","useCallback","event","current","getRelativeCursor","index","find","handleMouseEnter","node","handleMouseMove","handleMouseLeave","previousNode","handleClick","_jsxs","ref","opacity","renderCell","style","cursor","renderVoronoiToCanvas","ctx","save","globalAlpha","beginPath","strokeStyle","lineWidth","restore","renderVoronoiCellToCanvas","fillStyle"],"sources":["E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\props.ts","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\computeMesh.ts","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\hooks.ts","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\Voronoi.tsx","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\ResponsiveVoronoi.tsx","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\Mesh.tsx","E:\\Work\\legacy\\legacy-frontend-main\\node_modules\\@nivo\\voronoi\\src\\meshCanvas.ts"],"sourcesContent":["import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n","import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { useRef, useState, useCallback, useMemo } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        event => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n","import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module"}