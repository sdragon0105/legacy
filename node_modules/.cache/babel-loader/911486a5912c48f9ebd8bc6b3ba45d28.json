{"ast":null,"code":"var _jsxFileName = \"E:\\\\Work\\\\legacy\\\\legacy-frontend-main\\\\src\\\\games\\\\crabada\\\\Economy\\\\EconomyContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Economy from './Economy';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = '';\n  let fetchURL = '';\n\n  switch (table) {\n    case 'MarketplaceSales':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace';\n      break;\n\n    case 'TUS':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab49efe0d854695198b42/economy/inflation';\n      break;\n\n    default:\n      break;\n  }\n\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n\n    default:\n      break;\n  }\n\n  try {\n    let response = await axios.get( // 'https://p2eanalytics.com/crabada/getEconomy',\n    fetchURL, {\n      params: {\n        // table: table,\n        // timeRange: timeRange,\n        frequency: frequencParam\n      }\n    });\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nfunction EconomyContainer() {\n  _s();\n\n  const [menus, setMenus] = useState([0, 0]);\n  const [timeFilter, setTimeFilter] = useState(['all', 'all']);\n  const [marketplaceData, setMarketplaceData] = useState([[]]);\n  const [tokenData, setTokenData] = useState([[]]);\n  const [tokenMinMax, setTokenMinMax] = useState([['auto', 'auto'], ['auto', 'auto']]);\n  const [marketMinMax, setMarketMinMax] = useState([['auto', 'auto'], ['auto', 'auto'], ['auto', 'auto']]);\n  const temp = {\n    erc721Id: 'erc721:62646d9538af487750b95e33',\n    nativeCurrencyId: 'erc20:6265913a2d30e71b11d446f6',\n    data: [{\n      timestamp: 1650369600000,\n      unitsSold: 54,\n      averageNativeVolume: 1127116000000000000000000,\n      averageUSDVolume: 0,\n      averageNativePrice: 20872518518518518518518,\n      averageUSDPrice: 0\n    }, {\n      timestamp: 1650373200000,\n      unitsSold: 68,\n      averageNativeVolume: 1391438000000000000000000,\n      averageUSDVolume: 0,\n      averageNativePrice: 20462323529411764705882,\n      averageUSDPrice: 0\n    }, {\n      timestamp: 1650376800000,\n      unitsSold: 56,\n      averageNativeVolume: 1207184000000000000000000,\n      averageUSDVolume: 0,\n      averageNativePrice: 21556857142857142857142,\n      averageUSDPrice: 0\n    }, {\n      timestamp: 1650380400000,\n      unitsSold: 137,\n      averageNativeVolume: 2697732000000000000000000,\n      averageUSDVolume: 0,\n      averageNativePrice: 19691474452554744525547,\n      averageUSDPrice: 0\n    }]\n  };\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      if (!err) {\n        let salesMin = 99999999999999;\n        let salesMax = -1;\n        let averageMin = 99999999999999;\n        let averageMax = -1;\n        let countMin = 99999999999999;\n        let countMax = -1; // let salesArray = market[0][0]['data']\n        // let tempArray = temp.data;\n\n        let tempArray = market.data;\n        console.log('salesArray', tempArray);\n        let salesArr = [];\n        let averageArr = [];\n        let soldArr = [];\n        let marketArray = [];\n\n        for (let i = 0; i < tempArray.length; i++) {\n          let timestamp = tempArray[i].timestamp; //Example -> in ms\n\n          const date = new Date(timestamp);\n          const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`;\n          salesArr.push({\n            x: dateResult,\n            y: tempArray[i].averageNativeVolume / Math.pow(10, 18)\n          });\n          averageArr.push({\n            x: dateResult,\n            y: tempArray[i].averageNativePrice / Math.pow(10, 18)\n          });\n          soldArr.push({\n            x: dateResult,\n            y: tempArray[i].unitsSold\n          });\n\n          if (salesArr[i]['y'] < salesMin) {\n            salesMin = salesArr[i]['y'];\n          }\n\n          if (salesArr[i]['y'] > salesMax) {\n            salesMax = salesArr[i]['y'];\n          }\n\n          if (averageArr[i]['y'] < averageMin) {\n            averageMin = averageArr[i]['y'];\n          }\n\n          if (averageArr[i]['y'] > averageMax) {\n            averageMax = averageArr[i]['y'];\n          }\n\n          if (soldArr[i]['y'] < countMin) {\n            countMin = soldArr[i]['y'];\n          }\n\n          if (soldArr[i]['y'] > countMax) {\n            countMax = soldArr[i]['y'];\n          }\n        }\n\n        console.log('salesArr', salesArr);\n        marketArray.push([{\n          id: 'Sales',\n          data: salesArr\n        }]);\n        marketArray.push([{\n          id: 'Average Price',\n          data: averageArr\n        }]);\n        marketArray.push([{\n          id: 'Crabada Sold',\n          data: soldArr\n        }]);\n        console.log('marketArray', marketArray); // let averageMin = 99999999999999\n        // let averageMax = -1\n        // let averageArray = market[1][0]['data']\n        // for (let i = 0; i < averageArray.length; i++) {\n        //   if (averageArray[i]['y'] < averageMin) {\n        //     averageMin = averageArray[i]['y']\n        //   }\n        //   if (averageArray[i]['y'] > averageMax) {\n        //     averageMax = averageArray[i]['y']\n        //   }\n        // }\n        // let countMin = 99999999999999\n        // let countMax = -1\n        // let countArray = market[2][0]['data']\n        // for (let i = 0; i < countArray.length; i++) {\n        //   if (countArray[i]['y'] < countMin) {\n        //     countMin = countArray[i]['y']\n        //   }\n        //   if (countArray[i]['y'] > countMax) {\n        //     countMax = countArray[i]['y']\n        //   }\n        // }\n\n        salesMin = salesMin * 0.4;\n        salesMax = salesMax * 1.2;\n        averageMin = averageMin * 0.4;\n        averageMax = averageMax * 1.2;\n        countMin = countMin * 0.4;\n        countMax = countMax * 1.2; // setMarketplaceData(market)\n\n        setMarketplaceData(marketArray);\n        setMarketMinMax([[salesMin, salesMax], [averageMin, averageMax], [countMin, countMax]]);\n      }\n    });\n  }, [timeFilter[0]]);\n  const temp1 = {\n    erc20Id: 'erc20:62646d9538af487750b95e33',\n    data: [{\n      timestamp: 1650369600000,\n      netSupply: 1127116000000000000000000,\n      burnPercent: 0.01,\n      mintPercent: 0.05,\n      inflationPercent: 0.04,\n      timeBucketMints: 100000000000,\n      timeBucketBurns: 100000000000\n    }, {\n      timestamp: 1650373200000,\n      netSupply: 1227116000000000000000000,\n      burnPercent: 0.01,\n      mintPercent: 0.05,\n      inflationPercent: 0.04,\n      timeBucketMints: 100000000000,\n      timeBucketBurns: 100000000000\n    }, {\n      timestamp: 1650376800000,\n      netSupply: 1137116000000000000000000,\n      burnPercent: 0.01,\n      mintPercent: 0.05,\n      inflationPercent: 0.04,\n      timeBucketMints: 100000000000,\n      timeBucketBurns: 100000000000\n    }, {\n      timestamp: 1650380400000,\n      netSupply: 1027116000000000000000000,\n      burnPercent: 0.01,\n      mintPercent: 0.05,\n      inflationPercent: 0.04,\n      timeBucketMints: 100000000000,\n      timeBucketBurns: 100000000000\n    }]\n  };\n  useEffect(() => {\n    // fetchData('TUS', timeFilter[1], (err, token) => {\n    // console.log('token', token);\n    // if (!err) {\n    let netSupplyMin = 99999999999999;\n    let netSupplyMax = -1; // let supplyArray = token[0][0]['data']\n\n    let tempArray = temp1.data;\n    console.log('aaaa', tempArray);\n    let netSupplyArr = []; // let issuanceRateArr = [];\n\n    let tokenArr = [];\n    let issuance = {\n      id: 'issuance',\n      data: []\n    };\n    let breeding = {\n      id: 'breeding',\n      data: []\n    };\n    let inflation = {\n      id: 'inflation',\n      data: []\n    };\n    let timeBucketMintBurnArr = [];\n\n    for (let i = 0; i < tempArray.length; i++) {\n      let timestamp = tempArray[i].timestamp; //Example -> in ms\n\n      const date = new Date(timestamp);\n      const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n      netSupplyArr.push({\n        x: dateResult,\n        y: tempArray[i].netSupply / Math.pow(10, 18)\n      }); // 1\n\n      issuance.data.push({\n        x: dateResult,\n        y: tempArray[i].inflationPercent\n      }); // 2\n\n      breeding.data.push({\n        x: dateResult,\n        y: tempArray[i].burnPercent\n      }); // 3\n\n      inflation.data.push({\n        x: dateResult,\n        y: tempArray[i].mintPercent\n      });\n      console.log(netSupplyArr);\n\n      if (netSupplyArr[i]['y'] < netSupplyMin) {\n        netSupplyMin = netSupplyArr[i]['y'];\n        console.log(netSupplyMin);\n      }\n\n      if (netSupplyArr[i]['y'] > netSupplyMax) {\n        netSupplyMax = netSupplyArr[i]['y'];\n        console.log(netSupplyMax);\n      } // \n\n\n      timeBucketMintBurnArr.push({\n        x: dateResult,\n        mints: tempArray[i].mints,\n        burns: tempArray[i].burns\n      });\n    }\n\n    tokenArr.push([{\n      id: 'Net Supply',\n      data: netSupplyArr\n    }]);\n    tokenArr.push([issuance, breeding, inflation]);\n    tokenArr.push([timeBucketMintBurnArr]);\n    netSupplyMax = netSupplyMax * 1.2;\n    netSupplyMin = netSupplyMin * 0.3; // setTokenData(token);\n\n    setTokenData(tokenArr);\n    setTokenMinMax([[netSupplyMin, netSupplyMax], ['auto', 'auto']]); // }\n    // });\n  }, [timeFilter[1]]);\n  return /*#__PURE__*/_jsxDEV(Economy, {\n    menus: menus,\n    setMenus: setMenus,\n    market: marketplaceData,\n    token: tokenData,\n    timeFilter: timeFilter,\n    setTimeFilter: setTimeFilter,\n    tokenMinMax: tokenMinMax,\n    marketMinMax: marketMinMax\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EconomyContainer, \"p+CoX6ZcRU6Ax6QojM9wp8Dc5E8=\");\n\n_c = EconomyContainer;\nexport default EconomyContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EconomyContainer\");","map":{"version":3,"sources":["E:/Work/legacy/legacy-frontend-main/src/games/crabada/Economy/EconomyContainer.js"],"names":["React","useState","useEffect","useCallback","Economy","axios","fetchData","table","timeRange","callback","frequencParam","fetchURL","response","get","params","frequency","data","e","EconomyContainer","menus","setMenus","timeFilter","setTimeFilter","marketplaceData","setMarketplaceData","tokenData","setTokenData","tokenMinMax","setTokenMinMax","marketMinMax","setMarketMinMax","temp","erc721Id","nativeCurrencyId","timestamp","unitsSold","averageNativeVolume","averageUSDVolume","averageNativePrice","averageUSDPrice","err","market","salesMin","salesMax","averageMin","averageMax","countMin","countMax","tempArray","console","log","salesArr","averageArr","soldArr","marketArray","i","length","date","Date","dateResult","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","push","x","y","Math","pow","id","temp1","erc20Id","netSupply","burnPercent","mintPercent","inflationPercent","timeBucketMints","timeBucketBurns","netSupplyMin","netSupplyMax","netSupplyArr","tokenArr","issuance","breeding","inflation","timeBucketMintBurnArr","mints","burns"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Economy from './Economy';\nimport axios from 'axios';\n\nconst fetchData = async (table, timeRange, callback) => {\n  let frequencParam = '';\n  let fetchURL = '';\n  switch (table) {\n    case 'MarketplaceSales':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab3f9f19ae260acb3f7df/economy/marketplace';\n      break;\n    case 'TUS':\n      fetchURL = 'http://ec2-54-193-76-195.us-west-1.compute.amazonaws.com:8080/626ab49efe0d854695198b42/economy/inflation';\n      break;\n    default:\n      break;\n  }\n  switch (timeRange) {\n    case '24hrs':\n      frequencParam = 'TWENTY_FOUR';\n      break;\n    case '7days':\n      frequencParam = 'SEVEN';\n      break;\n    case 'all':\n      frequencParam = 'ALL_TIME';\n      break;\n    default:\n      break;\n  }\n  try {\n    let response = await axios.get(\n      // 'https://p2eanalytics.com/crabada/getEconomy',\n      fetchURL,\n      {\n        params: {\n          // table: table,\n          // timeRange: timeRange,\n          frequency: frequencParam,\n        },\n      },\n    );\n    callback(null, response.data.data);\n  } catch (e) {\n    callback(e);\n  }\n};\n\nfunction EconomyContainer() {\n  const [menus, setMenus] = useState([0, 0]);\n  const [timeFilter, setTimeFilter] = useState(['all', 'all']);\n  const [marketplaceData, setMarketplaceData] = useState([[]]);\n  const [tokenData, setTokenData] = useState([[]]);\n  const [tokenMinMax, setTokenMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ]);\n  const [marketMinMax, setMarketMinMax] = useState([\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n    ['auto', 'auto'],\n  ]);\n\n  const temp = {\n    erc721Id: 'erc721:62646d9538af487750b95e33',\n    nativeCurrencyId: 'erc20:6265913a2d30e71b11d446f6',\n    data: [\n      {\n        timestamp: 1650369600000,\n        unitsSold: 54,\n        averageNativeVolume: 1127116000000000000000000,\n        averageUSDVolume: 0,\n        averageNativePrice: 20872518518518518518518,\n        averageUSDPrice: 0,\n      },\n      {\n        timestamp: 1650373200000,\n        unitsSold: 68,\n        averageNativeVolume: 1391438000000000000000000,\n        averageUSDVolume: 0,\n        averageNativePrice: 20462323529411764705882,\n        averageUSDPrice: 0,\n      },\n      {\n        timestamp: 1650376800000,\n        unitsSold: 56,\n        averageNativeVolume: 1207184000000000000000000,\n        averageUSDVolume: 0,\n        averageNativePrice: 21556857142857142857142,\n        averageUSDPrice: 0,\n      },\n      {\n        timestamp: 1650380400000,\n        unitsSold: 137,\n        averageNativeVolume: 2697732000000000000000000,\n        averageUSDVolume: 0,\n        averageNativePrice: 19691474452554744525547,\n        averageUSDPrice: 0,\n      },\n    ],\n  };\n\n  useEffect(() => {\n    fetchData('MarketplaceSales', timeFilter[0], (err, market) => {\n      if (!err) {\n        let salesMin = 99999999999999;\n        let salesMax = -1;\n        let averageMin = 99999999999999;\n        let averageMax = -1;\n        let countMin = 99999999999999;\n        let countMax = -1;\n        // let salesArray = market[0][0]['data']\n        // let tempArray = temp.data;\n        let tempArray = market.data;\n        console.log('salesArray', tempArray);\n        let salesArr = [];\n        let averageArr = [];\n        let soldArr = [];\n        let marketArray = [];\n\n        for (let i = 0; i < tempArray.length; i++) {\n          let timestamp = tempArray[i].timestamp; //Example -> in ms\n          const date = new Date(timestamp);\n          const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}`;\n\n          salesArr.push({ x: dateResult, y: tempArray[i].averageNativeVolume / Math.pow(10, 18) });\n          averageArr.push({ x: dateResult, y: tempArray[i].averageNativePrice / Math.pow(10, 18) });\n          soldArr.push({ x: dateResult, y: tempArray[i].unitsSold });\n\n          if (salesArr[i]['y'] < salesMin) {\n            salesMin = salesArr[i]['y'];\n          }\n          if (salesArr[i]['y'] > salesMax) {\n            salesMax = salesArr[i]['y'];\n          }\n\n          if (averageArr[i]['y'] < averageMin) {\n            averageMin = averageArr[i]['y'];\n          }\n          if (averageArr[i]['y'] > averageMax) {\n            averageMax = averageArr[i]['y'];\n          }\n\n          if (soldArr[i]['y'] < countMin) {\n            countMin = soldArr[i]['y'];\n          }\n          if (soldArr[i]['y'] > countMax) {\n            countMax = soldArr[i]['y'];\n          }\n        }\n        console.log('salesArr', salesArr);\n        marketArray.push([{ id: 'Sales', data: salesArr }]);\n        marketArray.push([{ id: 'Average Price', data: averageArr }]);\n        marketArray.push([{ id: 'Crabada Sold', data: soldArr }]);\n        console.log('marketArray', marketArray);\n\n        // let averageMin = 99999999999999\n        // let averageMax = -1\n        // let averageArray = market[1][0]['data']\n        // for (let i = 0; i < averageArray.length; i++) {\n        //   if (averageArray[i]['y'] < averageMin) {\n        //     averageMin = averageArray[i]['y']\n        //   }\n        //   if (averageArray[i]['y'] > averageMax) {\n        //     averageMax = averageArray[i]['y']\n        //   }\n        // }\n        // let countMin = 99999999999999\n        // let countMax = -1\n        // let countArray = market[2][0]['data']\n        // for (let i = 0; i < countArray.length; i++) {\n        //   if (countArray[i]['y'] < countMin) {\n        //     countMin = countArray[i]['y']\n        //   }\n        //   if (countArray[i]['y'] > countMax) {\n        //     countMax = countArray[i]['y']\n        //   }\n        // }\n\n        salesMin = salesMin * 0.4;\n        salesMax = salesMax * 1.2;\n        averageMin = averageMin * 0.4;\n        averageMax = averageMax * 1.2;\n        countMin = countMin * 0.4;\n        countMax = countMax * 1.2;\n\n        // setMarketplaceData(market)\n        setMarketplaceData(marketArray);\n\n        setMarketMinMax([\n          [salesMin, salesMax],\n          [averageMin, averageMax],\n          [countMin, countMax],\n        ]);\n      }\n    });\n  }, [timeFilter[0]]);\n\n  const temp1 = {\n    erc20Id: 'erc20:62646d9538af487750b95e33',\n    data: [\n      {\n        timestamp: 1650369600000,\n        netSupply: 1127116000000000000000000,\n        burnPercent: 0.01,\n        mintPercent: 0.05,\n        inflationPercent: 0.04,\n        timeBucketMints: 100000000000,\n        timeBucketBurns: 100000000000,\n      },\n      {\n        timestamp: 1650373200000,\n        netSupply: 1227116000000000000000000,\n        burnPercent: 0.01,\n        mintPercent: 0.05,\n        inflationPercent: 0.04,\n        timeBucketMints: 100000000000,\n        timeBucketBurns: 100000000000,\n      },\n      {\n        timestamp: 1650376800000,\n        netSupply: 1137116000000000000000000,\n        burnPercent: 0.01,\n        mintPercent: 0.05,\n        inflationPercent: 0.04,\n        timeBucketMints: 100000000000,\n        timeBucketBurns: 100000000000,\n      },\n      {\n        timestamp: 1650380400000,\n        netSupply: 1027116000000000000000000,\n        burnPercent: 0.01,\n        mintPercent: 0.05,\n        inflationPercent: 0.04,\n        timeBucketMints: 100000000000,\n        timeBucketBurns: 100000000000,\n      },\n    ],\n  };\n\n  useEffect(() => {\n    // fetchData('TUS', timeFilter[1], (err, token) => {\n      // console.log('token', token);\n      // if (!err) {\n      let netSupplyMin = 99999999999999;\n      let netSupplyMax = -1;\n\n      // let supplyArray = token[0][0]['data']\n      let tempArray = temp1.data;\n      console.log('aaaa', tempArray);\n      let netSupplyArr = [];\n      // let issuanceRateArr = [];\n      let tokenArr = [];\n\n      let issuance = {\n        id: 'issuance',\n        data: [],\n      };\n      let breeding = {\n        id: 'breeding',\n        data: [],\n      };\n      let inflation = {\n        id: 'inflation',\n        data: [],\n      };\n\n      let timeBucketMintBurnArr = []\n\n      for (let i = 0; i < tempArray.length; i++) {\n        let timestamp = tempArray[i].timestamp; //Example -> in ms\n        const date = new Date(timestamp);\n        const dateResult = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n\n        netSupplyArr.push({ x: dateResult, y: tempArray[i].netSupply / Math.pow(10, 18) });        \n\n        // 1\n        issuance.data.push({\n          x: dateResult,\n          y: tempArray[i].inflationPercent,\n        });\n        // 2\n        breeding.data.push({\n          x: dateResult,\n          y: tempArray[i].burnPercent,\n        });\n        // 3\n        inflation.data.push({\n          x: dateResult,\n          y: tempArray[i].mintPercent,\n        });\n\n        console.log(netSupplyArr);\n        if (netSupplyArr[i]['y'] < netSupplyMin) {\n          netSupplyMin = netSupplyArr[i]['y'];\n          console.log(netSupplyMin);\n        }\n        if (netSupplyArr[i]['y'] > netSupplyMax) {\n          netSupplyMax = netSupplyArr[i]['y'];\n          console.log(netSupplyMax);\n        }\n\n        // \n        timeBucketMintBurnArr.push({ x: dateResult, mints: tempArray[i].mints, burns: tempArray[i].burns });\n      }      \n\n      tokenArr.push([{ id: 'Net Supply', data: netSupplyArr }]);\n      tokenArr.push([issuance, breeding, inflation]);\n      tokenArr.push([timeBucketMintBurnArr]);\n\n      netSupplyMax = netSupplyMax * 1.2;\n      netSupplyMin = netSupplyMin * 0.3;\n\n      // setTokenData(token);\n      setTokenData(tokenArr);\n      setTokenMinMax([\n        [netSupplyMin, netSupplyMax],\n        ['auto', 'auto'],\n      ]);\n      // }\n    // });\n  }, [timeFilter[1]]);\n  return (\n    <Economy\n      menus={menus}\n      setMenus={setMenus}\n      market={marketplaceData}\n      token={tokenData}\n      timeFilter={timeFilter}\n      setTimeFilter={setTimeFilter}\n      tokenMinMax={tokenMinMax}\n      marketMinMax={marketMinMax}\n    />\n  );\n}\n\nexport default EconomyContainer;\n"]},"metadata":{},"sourceType":"module"}