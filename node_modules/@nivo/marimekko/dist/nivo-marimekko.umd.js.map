{"version":3,"file":"nivo-marimekko.umd.js","sources":["../src/props.ts","../src/types.ts","../src/hooks.ts","../src/Bar.tsx","../src/Bars.tsx","../src/BarTooltip.tsx","../src/Marimekko.tsx","../src/ResponsiveMarimekko.tsx"],"sourcesContent":["import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphsâ€”Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        if (layout === 'vertical') {\n            return scaleLinear().domain([max, min]).range([0, height])\n        }\n\n        return scaleLinear().domain([min, max]).range([0, width])\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n\n        const thicknessScale = scaleLinear().domain([0, totalValue])\n\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n\n        if (layout === 'vertical') {\n            thicknessScale.range([0, width - totalPadding])\n        } else {\n            thicknessScale.range([0, height - totalPadding])\n        }\n\n        return thicknessScale\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number, number>\n    dimensionsScale: ScaleLinear<number, number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? (xScale as any) : undefined}\n                yScale={enableGridY ? (yScale as any) : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useComputedData","data","stacked","dimensionIds","valueFormat","thicknessScale","dimensionsScale","getColor","useOrdinalColorScale","formatValue","useValueFormatter","useMemo","computedData","position","forEach","datum","thickness","value","computedDatum","x","y","width","height","dimensions","allPositions","totalSize","dimensionId","dimension","find","stack","key","dimensionPoint","index","dimensionDatum","id","formattedValue","color","position0","position1","Math","min","max","push","useBars","theme","useTheme","getBorderColor","useInheritedColor","all","useMarimekko","rawDimensions","_get","useDataDimensions","offsetFunction","d3Stack","keys","useStack","allValues","useStackedData","normalizedData","getId","getValue","normalized","datumId","datumValue","useNormalizedData","totalValue","reduce","acc","scaleLinear","domain","totalPadding","length","range","useThicknessScale","useDimensionsScale","bars","Bar","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","to","fill","stroke","strokeWidth","undefined","Bars","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","axisTop","axisRight","axisBottom","axisLeft","gridXValues","gridYValues","defs","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","axes","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","top","right","bottom","left","legendData","label","useLegendData","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","layerContext","useLayerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","Container","props","ResponsiveWrapper"],"mappings":"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"}